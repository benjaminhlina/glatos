% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/animate.r
\name{animate}
\alias{animate}
\title{Interpolate geographic positions of animal movements within detection data}
\usage{
animate(dtc, rast = NULL, intTimeStamp = 86400, relRecapCtl = NULL,
  positionCtl = NULL, detColNames = list(animalCol = "animal_id",
  timestampCol = "detection_timestamp_utc", latitudeCol = "deploy_lat",
  longitudeCol = "deploy_long"), lnlThresh = 0.9)
}
\arguments{
\item{dtc}{A data frame containing detection data with at least 
4 columns containing 'animal', 'latitude', 'longitude', and 'timestamp' 
data. Default column names match the GLATOS standard detection 
detection export file but other names can be specified with 
\code{detColNames}.}

\item{rast}{An optional transition matrix with the "cost" of moving across 
across each cell within the map extent. Must be of class 
\code{TransitionLayer} (See \code{gdistance} package). Passed to  
\code{trans} in \code{\link{movePath}}.}

\item{intTimeStamp}{The time step size (in seconds) of interpolated 
positions.}

\item{relRecapCtl}{An optional data frame with seven columns ('id', 
 'timestamp', 'location', 'lat', 'lon', 'color', and 'marker') containing
 data and plotting parameters about release or recapture events. 
\itemize{
  \item \code{id} contains the unique identifer of individual animals and 
       corresponds to 'id' column in 'dtc'. 
  \item \code{timestamp} contains date-time stamps (must be of class POSIXct)
    when animal was released or recovered.  
  \item \code{location} column indicates if the control settings represents
    unique release or recovery of animal. All values must be 'start' 
    (for release) or 'end' (for recovery; i.e., if fish was caught by angler
    ). All animals in \code{dtc} do not need to be included. Either a 
    'start' or 'end' record or both can be included for each fish. 
  \item \code{lat} contains latitude (decimal degrees; WGS84) of release or 
    recovery.  
  \item \code{lon} contains longitude (decimal degrees; WGS84) of release or 
    recovery.
  \item \code{color} contains the marker color to be plotted.  
  \item \code{marker} contains the marker style to be plotted. 
}}

\item{positionCtl}{An optional data frame with four columns ('id', 'what', 
  'color', and 'marker') that specify the plot symbols and colors for 
  each animal and position type. 
\itemize{
  \item \code{id} contains the unique identifer of individual animals and 
       corresponds to 'id' column in 'dtc'. 
  \item \code{what} indicates if the options should be applied to observed
    positions (detections; 'real') or interpolated positions ('int'). Only
    values 'real' or 'int' are valid.
  \item \code{color} contains the marker color to be plotted for each 
    animal and position type.  
  \item \code{marker} contains the marker style to be plotted for each
    animal and position type.
}}

\item{detColNames}{A list with names of required columns in 
  \code{detections}: 
\itemize{
  \item \code{animalCol} is a character string with the name of the column 
         containing the individual animal identifier.
 \item \code{timestampCol} is a character string with the name of the column 
         containing datetime stamps for the detections (MUST be of class 
    'POSIXct').
 \item \code{latitudeCol} is a character string with the name of the column
    containing latititude of the receiver.
 \item \code{longitudeCol} is a character string with the name of the column
    containing longititude of the receiver.}}

\item{lnlThresh}{A numeric threshold for determining if linear or non-linear 
interpolation will be used based on the ratio of linear-to-non-linear
shortest path distances. Passed to \code{trans} in \code{\link{movePath}}.}
}
\description{
\code{animate} interpolates geographic positions of animal movements within 
detection data using linear or non-linear interpolation (via 
\code{\link{movePath}}).
}
\details{
This function provides interpolated positions (and plot control parameters) 
at regularly-spaced interval from a set of irregularly-spaced geographic 
positions (e.g., telemetry detections). Each pair of positions is passed
to \code{\link{movePath}} for interpolation via linear or non-linear 
methods, depending on \code{rast}.

Non-linear interpolation uses the 'gdistance' package to find the shortest 
pathway between two locations (i.e., receivers) that avoid 'impossible' 
movements (e.g., over land for fish). The shortest non-linear path between 
two locations is calculated using a 'transition matrix layer' (\code{rast}) 
that represents the 'cost' of an animal moving between adjacent grid cells. 
For example, each cells in \code{rast} may be coded as water (1) or land (0)
to represent possible (1) and impossible(0) movement path.

Linear interpolation is used for all points when \code{rast} is not supplied.
When \code{rast} is supplied, then interpolation method is determined for 
pair of observed positions. For example, linear interpolaton will be used
if the two points are exactly the same and when the ratio of linear-to-non-
can be used to control whether non-linear or linear interpolation is used
for all points. For example, non-linear interpolation will be used for all
points when \code{lnlThresh} = 1 and linear interpolation will be used for 
all points \code{lnlThresh} = 0.
}
\note{
If \code{positionCtl} is given, positions will only be interpolated 
  for animals identified in that data frame.
}
\examples{
library(glatos)

#example detection data
data(walleye_detections) 
head(walleye_detections)

#call with defaults; linear interpolation
pos1 <- animate(walleye_detections)

#plot on example map background
data(greatLakesPoly)
library(sp)
plot(greatLakesPoly)

#coerce to SpatialPoints object and plot
pts <- SpatialPoints(pos1[pos1$id==3,c("lon","lat")])
points(pts, pch=20, col='red', cex=0.5)

#example relRecapCtl data
data(walleye_relRecapCtl) 
head(walleye_relRecapCtl)

#example positionCtl data
data(walleye_positionCtl) 
head(walleye_positionCtl)

#call with plot control tables and other options
pos2 <- animate(walleye_detections, relRecapCtl=walleye_relRecapCtl,
	 positionCtl=walleye_positionCtl)

#coerce to SpatialPoints object and plot
pts2 <- SpatialPoints(pos2[,c("lon","lat")])
points(pts2, pch=pos2$marker, col=pos2$color, cex=0.5)

#example transition matrix
data(greatLakesTrLayer)

#call with plot control tables and other options
# note that it is quite a bit slower due to non-linear interpolation
pos3 <- animate(walleye_detections, rast=greatLakesTrLayer, 
  relRecapCtl=walleye_relRecapCtl,
	 positionCtl=walleye_positionCtl)

#coerce to SpatialPoints object and plot
pts3 <- SpatialPoints(pos3[,c("lon","lat")])
points(pts3, pch=pos3$marker, col=pos3$color, cex=0.5)

}
\seealso{
\code{\link{movePath}}
}
\author{
Todd Hayden
}
