% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vis-receiver_history_plot.r
\name{eventPlot}
\alias{eventPlot}
\title{Plot time series glatos event data}
\usage{
eventPlot(events, eventColNames = list(locationCol = "Location", eventStartCol
  = "FirstDetection", eventEndCol = "LastDetection"), controlTable = NULL,
  plotTitle = "", Ylab = NA, outFile = "EventPlot.png", ...)
}
\arguments{
\item{events}{A data frame containing at least three columns with 'location',
'eventStart', and 'eventEnd' data. Default column names match those 
produced by \cr 
\code{glatos::detectionEventFilter}, but non-standard column names can be 
specified with \code{eventsColNames}.}

\item{eventColNames}{An optional list of character strings with names of
  required columns in \code{events}. 
\itemize{
  \item \code{locationCol} is a character string with the name of the column 
       containing the locations that will be plotted on the y-axis.
  \item \code{eventStartCol} is is a character string with the name of the 
    column containing the date-time stamps for the start of each event. Must
    be of class POSIXct.
  \item \code{eventEndCol} is is a character string with the name of the 
    column containing the date-time stamps for the end of each event. Must
    be of class POSIXct.
}}

\item{controlTable}{An optional dataframe with two columns: 'location' and 
'y_order'. The 'location' column is a character vector of locations to be 
plotted on the y-axis and the name of the 'location' column must match the 
'location' colum in \code{detections} dataframe 
(set by \code{detColNames}). The 'y_order' column specifies what order the 
grouping variable will appear on the y-axis (y_order increases as you move 
away from the x-axis).}

\item{plotTitle}{An optional character scalar that will apear at the top of 
the plot. Default is no title.}

\item{Ylab}{A character scalar indicating the y-axis label that will appear 
on the figure (default will match \code{eventColNames$locationCol}).}

\item{outFile}{An optional character scalar with the name of the png file 
created (including file extension; default = "eventPlot.png").}

\item{...}{Other plotting arguments that pass to "plot" function 
(e.g., col, lwd, type).}
}
\value{
A png file containing the events plot (default name "EventPlot.png")  
  is written to the working directory.
}
\description{
Create an abacus-like plot for discrete event data with start 
and end times. Suitable for data like detection events 
(i.e., output from the glatos package \code{glatos::detectionEventFilter} 
function) and receiver histories (i.e., based on receiverLocations.csv 
GLATOS export).
}
\details{
NAs are not allowed in any of the three required columns of 
  \code{events}.

The control table is used to control which locations will appear in 
the plot and in what order they will appear. If no controlTable is 
supplied, the function will plot only those locations that appear in the 
\code{events} data frame and the order of locations on the y-axis will  
correspond to the order in which each location appears in the data frame.

By default, the function does not distinguish detections from  
different transmitters and will therefore plot all transmitters the same  
color. If more than one fish is desired in a single plot, a vector of colors  
must be passed to the function using the 'col =' argument. The color vector  
must be the same length as the number of rows in the events data frame.

#' Alternatively, plots for multiple individual fish can be created 
by looping through and creating a separate plot on subsetted events data.
Plotting options (i.e., line width and color) can be changed using optional 
graphical parameters \url{http://www.statmethods.net/advgraphs/parameters.html} 
that are passed to "segments" (see ?segments).
}
\examples{
#make detection event file using detectionEventFilter function
data(walleye_detections)
#subset one transmitter
walleye_detections <-
	 walleye_detections[walleye_detections$transmitter_id == 32123, ]

#make events based on 7-d time threshold
walleye_events_7d <- detectionEventFilter(walleye_detections, 
 timeSep = 604800)

#plot with defaults
eventPlot(walleye_events_7d)

#example control table
data(walleye_controlTable)
head(walleye_controlTable)
names(walleye_controlTable)[1] <- "Location" #to match events

#plot with controlTable and customized axes
eventPlot(walleye_events_7d, controlTable = walleye_controlTable, 
  plotTitle = "Receiver History", Ylab = "Location", col = "red", lwd = 3)
}
\author{
T. R. Binder
}
